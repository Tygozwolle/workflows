# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  workflow_dispatch:
   inputs:
      ref:
        description: 'Enter ref'
        required: false
        default: 'master'  
#  push:
  repository_dispatch:


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  create:
    runs-on: ubuntu-latest
    steps:         
    - name: Run the action # You would run your tests before this using the output to set state/desc
      uses: billyjbryant/create-status-check@v2
      with:
        authToken: ${{ secrets.TOKEN }}
        context: 'Test run'
        description: 'test run started'
        state: 'pending'
        sha: ${{ github.event.client_payload.ref }}
        repository: ${{ secrets.REPO }}
        target_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
       # sha: ${{github.event.pull_request.head.sha || github.sha}}
     # - name: set
   #     if:  (needs.test-2.result == 'success')
    #    run: |
   #       curl -L \
    #      -X POST \
   #       -H "Accept: application/vnd.github+json" \
    #      -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
    #      -H "X-GitHub-Api-Version: 2022-11-28" \
 #           https://api.github.com/repos/${{ secrets.REPO }}/statuses/${{ github.event.client_payload.ref }} \
    #        -d '{"state":"pending","target_url":"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}","description":"The build started!","context":"continuous-integration/jenkins"}'

  cache:
    runs-on: windows-latest
    needs: create
    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages    
      REF: ${{ github.event.client_payload.ref }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with: 
          repository: ${{ secrets.REPO }}
          token: ${{ secrets.TOKEN }}
          ref: ${{ github.event.client_payload.ref }}
         # ${{ github.event.inputs.ref }}
#      - uses: actions/cache@v3
#        with:
#          path: ${{ github.workspace }}\.nuget\packages
#          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }} #hash of project files
       #   restore-keys: |
           # ${{ runner.os }}-nuget-
      - uses: actions/cache@v3
        with:
          path: ./.dotnet
          key: ${{ runner.os }}-dotnet #hash of project files
          restore-keys: |
            ${{ runner.os }}-dotnet-
      - name: Setup .NET
        uses: actions/setup-dotnet@v4.0.0
        with:
          dotnet-version: 8.0.x
        env:
          DOTNET_INSTALL_DIR: "./.dotnet"
      
      - name: Restore dependencies
        run: dotnet restore
      - uses: actions/cache/save@v3
        with:
          path: ${{ github.workspace }}\.nuget\packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }} #hash of project files
      
    
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    strategy:
      matrix:
       os: [windows-latest , windows-2022, windows-2019]
       version: [10, 12, 14]
       version2: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
  #     count: [1, 2]
      fail-fast: false
    needs:
      - cache
    runs-on: ${{ matrix.os }}
    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with: 
          repository: ${{ secrets.REPO }}
          token: ${{ secrets.TOKEN }}
          ref: ${{ github.event.client_payload.ref }}
      - uses: actions/cache/restore@v3
        with:
          path: ${{ github.workspace }}\.nuget\packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }} #hash of project files
          restore-keys: |
            ${{ runner.os }}-nuget-
      - uses: actions/cache/restore@v3
        with:
          path: ./.dotnet
          key: ${{ runner.os }}-dotnet #hash of project files
          restore-keys: |
            ${{ runner.os }}-dotnet-
      - name: Run a one-line script
        run: ls ImageRecognision/Model
      - uses: suisei-cn/actions-download-file@818d6b7dc8fe73f2f924b6241f2b1134ca1377d9 # 1.6.0
        #id: downloadfile  # Remember to give an ID if you need the output filename
        name: Download the file
        with:
  #        url: "https://github.com/onnx/models/raw/main/validated/vision/object_detection_segmentation/faster-rcnn/model/FasterRCNN-10.onnx?download="
          url: ${{ secrets.ULR }} 
          target: ImageRecognision/Model/
          filename: FasterRCNN-10.onnx
      - name: Run a one-line script
        run: ls ImageRecognision/Model
        # Invoke-WebRequest 
    #  - name: download 
     #   run: curl ${{ secrets.ULR }} 
    #  - name: Download a file
   #     uses: Minionguyjpro/Download-File-Action@v1
  #      with:
    # URL to file
 #         url: "https://github.com/onnx/models/raw/main/validated/vision/object_detection_segmentation/faster-rcnn/model/FasterRCNN-10.onnx?download="
    # Target path
#          target-path: ./ImageRecognision/Model
      # Runs a single command using the runners shell
      - name: Setup .NET
        uses: actions/setup-dotnet@v4.0.0
        with:
          dotnet-version: 8.0.x
        env:
          DOTNET_INSTALL_DIR: "./.dotnet"
      
      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore --verbosity quiet
      - name: Test
        run: dotnet test --configuration Release_Cpu 
          --verbosity quiet
        #--no-build --verbosity normal
  statusfailed:
    runs-on: ubuntu-latest
    needs:
    - build
    if: failure() || cancelled()
    steps:
     - name: Run the action # You would run your tests before this using the output to set state/desc
       uses: billyjbryant/create-status-check@v2
       with:
        authToken: ${{ secrets.TOKEN }}
        context: 'Test run'
        description: 'test run failed'
        state: 'failure'
        sha: ${{ github.event.client_payload.ref }}
        repository: ${{ secrets.REPO }}
        target_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    #  - name: set
     #   if: always()
   #     if:  (needs.test-2.result == 'success')
      #  run: |
       #   curl -L \
        #  -X POST \
         # -H "Accept: application/vnd.github+json" \
          #-H "Authorization: Bearer ${{ secrets.TOKEN }}" \
     #     -H "X-GitHub-Api-Version: 2022-11-28" \
      #      https://api.github.com/repos/${{ secrets.REPO }}/statuses/${{ github.event.client_payload.ref }} \
       #     -d '{"state":"failure","target_url":"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}","description":"The build failed!","context":"continuous-integration/jenkins"}'
  status:
    runs-on: ubuntu-latest
    needs:
    - build
    if: ${{ !cancelled() }}
    steps:
    
    - name: run
      id: percentage
      env: 
        Results: ${{ toJson(needs.*.result) }}
      run: | 
          echo "$Results"
          LL=$( echo $Results | jq '. | length' )
          
    - name: Run the action # You would run your tests before this using the output to set state/desc
      uses: billyjbryant/create-status-check@v2
      with:
        authToken: ${{ secrets.TOKEN }}
        context: 'Test run'
        description: 'test run sucesfull'
        state: 'success'
        sha: ${{ github.event.client_payload.ref }}
        repository: ${{ secrets.REPO }}
        target_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
   #   - name: set
   #     if:  (needs.test-2.result == 'success')
  #      run: |
   #       curl -L \
    #      -X POST \
     #     -H "Accept: application/vnd.github+json" \
      #    -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
       #   -H "X-GitHub-Api-Version: 2022-11-28" \
        #    https://api.github.com/repos/${{ secrets.REPO }}/statuses/${{ github.event.client_payload.ref }} \
       #     -d '{"state":"success","target_url":"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}","description":"The build succeeded!","context":"continuous-integration/jenkins"}'
    #  - name: set
     #   if:  (!needs.test-2.result == 'success')
      #  run: |
       #   curl -L \
        #  -X POST \
         # -H "Accept: application/vnd.github+json" \
   #       -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
   #       -H "X-GitHub-Api-Version: 2022-11-28" \
    #        https://api.github.com/repos/${{ secrets.REPO }}/statuses/${{ github.event.client_payload.ref }} \
     #       -d '{"state":"failure","target_url":"https://example.com/build/status","description":"The build succeeded!","context":"continuous-integration/jenkins"}'
  
 
