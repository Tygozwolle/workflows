name: team

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  #push:
  repository_dispatch:
    types: [team-windows-**]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
jobs:
  # This workflow contains a single job called "build"
  windowsrunner:
    timeout-minutes: 500
    # The type of runner that the job will run on
    runs-on: windows-latest
    env:
     GH_TOKEN: ${{ secrets.TOKEN }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!
      - name: Setup .NET
      #  if: ${{failure()}}
        uses: actions/setup-dotnet@v4.0.0
        with:
          dotnet-version: 8.0.x
        # env:
        #   DOTNET_INSTALL_DIR: "./.dotnet"
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        shell: pwsh

        run: |
          
          
           # Variables
            $agentZipUrl = "${{secrets.TEAM}}/update/buildAgentFull.zip"
            $agentZipPath = "C:\path\to\agent.zip"
            $agentExtractPath = "C:\path\to\agent"
            $agentConfigFile = "$agentExtractPath\conf\buildAgent.dist.properties"
            $agentConfigFileRenamed = "$agentExtractPath\conf\buildAgent.properties"
            $teamCityServerUrl = "${{secrets.TEAM}}"
            $agentName = "YourAgentName"
            $agentKey = ${{secrets.AGENT_KEY}}
            
            # Create directory for the agent ZIP file if it doesn't exist
            $agentDir = Split-Path $agentZipPath -Parent
            if (-not (Test-Path -Path $agentDir)) {
            New-Item -Path $agentDir -ItemType Directory
              }
            # Download the TeamCity Agent ZIP file
            Invoke-WebRequest -Uri $agentZipUrl -OutFile $agentZipPath

            # Extract the ZIP file
            Expand-Archive -Path $agentZipPath -DestinationPath $agentExtractPath
            ls
            # Configure the Agent
            (Get-Content $agentConfigFile) | ForEach-Object {
             $_ -replace 'serverUrl=http://localhost:8111/', "serverUrl=$teamCityServerUrl    "
            } | Set-Content $agentConfigFile
              # \n agentKey=$agentKey
            (Get-Content $agentConfigFile) | ForEach-Object {
            $_ -replace 'name=', "name=$agentName"
            } | Set-Content $agentConfigFile

            echo 'auto_authorize=true' >> $agentConfigFile
            echo agentKey=$agentKey >> $agentConfigFile
            echo agent_pool_name=windows >> $agentConfigFile
            
            # Rename configuration file
            Rename-Item -Path $agentConfigFile -NewName $agentConfigFileRenamed
            # Navigate to the Agent Directory
            Set-Location "$agentExtractPath\bin"
            Write-Host "Navigated to Agent directory: $agentExtractPath\bin"
            ls
            #         if (-Not (Test-Path -Path ".\agent.bat")) {
            # Write-Host "Error: agent.bat not found in the directory."
            # exit 1
            # }
            # Write-Host "Starting TeamCity Agent..."
            # $processInfo = New-Object System.Diagnostics.ProcessStartInfo
            # $processInfo.FileName = "cmd.exe"
            # $processInfo.Arguments = "/c agent.bat start"
            # $processInfo.RedirectStandardOutput = $true
            # $processInfo.RedirectStandardError = $true
            # $processInfo.UseShellExecute = $false
            # $processInfo.CreateNoWindow = $true

            # $process = New-Object System.Diagnostics.Process
            # $process.StartInfo = $processInfo
            # $process.Start() | Out-Null

            # # Print the output from agent.bat in real-time
            # $stdoutReader = $process.StandardOutput
            # $stderrReader = $process.StandardError

            # while (!$stdoutReader.EndOfStream -or !$stderrReader.EndOfStream) {
            #     if (!$stdoutReader.EndOfStream) {
            #         Write-Host $stdoutReader.ReadLine()
            #     }
            #     if (!$stderrReader.EndOfStream) {
            #         Write-Host $stderrReader.ReadLine()
            #     }
            # }

             # $process.WaitForExit()
            Write-Host "exit."
            # Start the Agent directly
            Write-Host "Starting TeamCity Agent..."
            cmd.exe /c "agent.bat start"
            Write-Host
            
            # # Navigate to the Agent Directory
            # Set-Location "$agentExtractPath\bin"

            # # Install the Agent Service
            # Start-Process -FilePath ".\agent.bat" -ArgumentList "install" -NoNewWindow -Wait

            # # Start the Agent in a new console window
            # Start-Process -FilePath ".\agent.bat" -ArgumentList "start" -NoNewWindow

            # Write-Host "TeamCity Agent installation and configuration completed."
             # sleep 86400
             $totalSeconds = 86400
              for ($i = 0; $i -lt $totalSeconds; $i += 60) {
              Start-Sleep -Seconds 60
              $remainingTime = ($totalSeconds - $i - 60) / 60
                Write-Host "$remainingTime minutes remaining."
                }
        
        #  ./config.cmd --url https://github.com/$REPO --token $token --ephemeral --labels windows,runner --name windows-${{ github.run_number }}
         # ./run.cmd

